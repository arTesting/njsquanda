// file: /pages/index.js
import Head from "next/head";
import { Inter } from "next/font/google";
import { useState } from "react";
import TextInput from "@/components/TextInput";
import SubmitButton from "@/components/SubmitButton";
import ResponseDisplay from "@/components/ResponseDisplay";
import useApi from "@/hooks/useApi";
import { getUserPrompt } from "../prompts/promptUtils";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [inputValue, setInputValue] = useState("");
  const [userType, setUserType] = useState("hr");
  const { data, error, loading, fetchData } = useApi();

  const handleSubmit = async (event) => {
    event.preventDefault();
    const userPrompt = getUserPrompt(inputValue, userType);
    await fetchData("/api/openai", "POST", { userPrompt, userType });
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  return (
    <>
      <Head>
        <title>üê¶‚Äçüî• Job interview questions:</title>
        <meta name="description" content="Generated by" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container">
        <h1 className={inter.className}>
          {userType === "candidate"
            ? "üê¶‚Äçüî• Interview Answers."
            : "üê¶‚Äçüî• Interview Questions"}
        </h1>
        <b><p className={inter.className} style={{ whiteSpace: "pre-line" }}>
          {userType === "candidate"
            ? `An intelligent interview prep app for candidates and HR professionals.
It generates smart, context-aware questions, answers, and insights to help you improve your interview skills. Start with a topic, and the app will guide you with follow-ups, key points, and communication tips. Perfect for sharpening your answers and boosting confidence.
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\nSelect your perspective ‚Äî what question do you want to answer? `
            : `An intelligent interview prep app for candidates and HR professionals.
It generates smart, context-aware questions, answers, and insights to help you conduct or prepare for interviews. Start with a topic, and the app will guide you with follow-ups, key points, and communication tips. Perfect for structured, engaging, and insightful interviews.
‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\nSelect your perspective ‚Äî what question do you want to ask? \nTo see how to answer your question, just select another role.`}
        </p></b>
        <form>
          <div className="mb-3">
            <div className="form-check form-check-inline">
              <input
                className="form-check-input bg-dark"
                type="radio"
                value="hr"
                checked={userType === "hr"}
                onChange={(e) => setUserType(e.target.value)}
                id="hr-radio"
              />
              <label className="form-check-label" htmlFor="hr-radio">
                HR
              </label>
            </div>
            <div className="form-check form-check-inline">
              <input
                className="form-check-input bg-dark"
                type="radio"
                value="candidate"
                checked={userType === "candidate"}
                onChange={(e) => setUserType(e.target.value)}
                id="candidate-radio"
              />
              <label className="form-check-label" htmlFor="candidate-radio">
                Candidate
              </label>
            </div>
          </div>
          <div className="mb-3">
            <TextInput
              value={inputValue}
              onChange={handleInputChange}
              placeholder={
                userType === "candidate"
                  ? "Tell me what topic or question should be answered..."
                  : "Tell me what question or topic you want to understand..."
              }
            />
          </div>
          <SubmitButton onClick={handleSubmit} disabled={loading} />
        </form>
        <ResponseDisplay data={data} error={error} loading={loading} />
      </main>
    </>
  );
}
